// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace gas.Migrations
{
    [DbContext(typeof(ThermostatDbContext))]
    partial class ThermostatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("ThermostatState", b =>
                {
                    b.Property<DateTimeOffset>("latestReportTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("atagOneVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("boilerConfig")
                        .HasColumnType("INTEGER");

                    b.Property<string>("boilerErrors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("boilerStatus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("burningHours")
                        .HasColumnType("REAL");

                    b.Property<int>("chControl_mode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("chMode")
                        .HasColumnType("INTEGER");

                    b.Property<double>("chModeDuration")
                        .HasColumnType("REAL");

                    b.Property<double>("chModeTemp")
                        .HasColumnType("REAL");

                    b.Property<double>("chReturnTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("chSetpoint")
                        .HasColumnType("REAL");

                    b.Property<int>("chStatus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("chTimeToTemp")
                        .HasColumnType("REAL");

                    b.Property<double>("chWaterPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("chWaterTemperature")
                        .HasColumnType("REAL");

                    b.Property<int>("connectionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("current")
                        .HasColumnType("REAL");

                    b.Property<double>("dbgOutsideTemp")
                        .HasColumnType("REAL");

                    b.Property<string>("deviceErrors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("deviceIP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("deviceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("deviceStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("dhwMode")
                        .HasColumnType("INTEGER");

                    b.Property<double>("dhwSetpoint")
                        .HasColumnType("REAL");

                    b.Property<int>("dhwStatus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("dhwWaterPres")
                        .HasColumnType("REAL");

                    b.Property<double>("dhwWaterTemp")
                        .HasColumnType("REAL");

                    b.Property<double>("dhwWaterTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("extendDuration")
                        .HasColumnType("REAL");

                    b.Property<double>("fireplaceDuration")
                        .HasColumnType("REAL");

                    b.Property<string>("flameStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("memoryAllocation")
                        .HasColumnType("INTEGER");

                    b.Property<double>("outsideTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("pcbTemp")
                        .HasColumnType("REAL");

                    b.Property<double>("powerCons")
                        .HasColumnType("REAL");

                    b.Property<int>("resets")
                        .HasColumnType("INTEGER");

                    b.Property<double>("roomTemperature")
                        .HasColumnType("REAL");

                    b.Property<int>("rssi")
                        .HasColumnType("INTEGER");

                    b.Property<double>("targetTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("vacationDuration")
                        .HasColumnType("REAL");

                    b.Property<double>("voltage")
                        .HasColumnType("REAL");

                    b.Property<int>("weatherStatus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("weatherTemp")
                        .HasColumnType("REAL");

                    b.HasKey("latestReportTime");

                    b.ToTable("States");
                });
#pragma warning restore 612, 618
        }
    }
}
